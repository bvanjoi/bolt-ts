use crate::ir;

pub trait Reducer {
    fn nodes(&self) -> &ir::Nodes;
    fn nodes_mut(&mut self) -> &mut ir::Nodes;

    fn reduce_if_stmt(&mut self, id: ir::IfStmtID);
    fn reduce_for_stmt(&mut self, id: ir::ForStmtID);
    fn reduce_for_of_stmt(&mut self, id: ir::ForOfStmtID);
    fn reduce_for_in_stmt(&mut self, id: ir::ForInStmtID);
    fn reduce_break_stmt(&mut self, id: ir::BreakStmtID);
    fn reduce_continue_stmt(&mut self, id: ir::ContinueStmtID);
    fn reduce_ret_stmt(&mut self, id: ir::RetStmtID);
    fn reduce_block_stmt(&mut self, id: ir::BlockStmtID);
    fn reduce_throw_stmt(&mut self, id: ir::ThrowStmtID);
    fn reduce_expr_stmt(&mut self, id: ir::ExprStmtID);
    fn reduce_labeled_stmt(&mut self, id: ir::LabeledStmtID);
    fn reduce_try_stmt(&mut self, id: ir::TryStmtID);
    fn reduce_do_stmt(&mut self, id: ir::DoStmtID);
    fn reduce_while_stmt(&mut self, id: ir::WhileStmtID);
    fn reduce_empty_stmt(&mut self, id: ir::EmptyStmtID);
    fn reduce_fn_decl(&mut self, id: ir::FnDeclID);
    fn reduce_class_decl(&mut self, id: ir::ClassDeclID);
    fn reduce_module_decl(&mut self, id: ir::ModuleDeclID);
    fn reduce_enum_decl(&mut self, id: ir::EnumDeclID);
    fn reduce_import_decl(&mut self, id: ir::ImportDeclID);
    fn reduce_export_decl(&mut self, id: ir::ExportDeclID);
    fn reduce_export_assign(&mut self, id: ir::ExportAssignID);
    fn reduce_assign_expr(&mut self, id: ir::AssignExprID);
    fn reduce_bin_expr(&mut self, id: ir::BinExprID);
    fn reduce_omit_expr(&mut self, id: ir::OmitExprID);
    fn reduce_paren_expr(&mut self, id: ir::ParenExprID);
    fn reduce_this_expr(&mut self, id: ir::ThisExprID);
    fn reduce_ident(&mut self, id: ir::IdentID);
    fn reduce_bool_lit(&mut self, id: ir::BoolLitID);
    fn reduce_null_lit(&mut self, id: ir::NullLitID);
    fn reduce_num_lit(&mut self, id: ir::NumLitID);
    fn reduce_big_int_lit(&mut self, id: ir::BigIntLitID);
    fn reduce_reg_exp_lit(&mut self, id: ir::RegExpLitID);
    fn reduce_string_lit(&mut self, id: ir::StringLitID);
    fn reduce_array_lit(&mut self, id: ir::ArrayLitID);
    fn reduce_object_lit(&mut self, id: ir::ObjectLitID);
    fn reduce_void_expr(&mut self, id: ir::VoidExprID);
    fn reduce_typeof_expr(&mut self, id: ir::TypeofExprID);
    fn reduce_super_expr(&mut self, id: ir::SuperExprID);
    fn reduce_ele_access_expr(&mut self, id: ir::EleAccessExprID);
    fn reduce_prop_access_expr(&mut self, id: ir::PropAccessExprID);
    fn reduce_postfix_unary_expr(&mut self, id: ir::PostfixUnaryExprID);
    fn reduce_prefix_unary_expr(&mut self, id: ir::PrefixUnaryExprID);
    fn reduce_tagged_template_expr(&mut self, id: ir::TaggedTemplateExprID);
    fn reduce_template_expr(&mut self, id: ir::TemplateExprID);
    fn reduce_spread_elem(&mut self, id: ir::SpreadElementID);
    fn reduce_arrow_fn_expr(&mut self, id: ir::ArrowFnExprID);
    fn reduce_new_expr(&mut self, id: ir::NewExprID);
    fn reduce_class_expr(&mut self, id: ir::ClassExprID);
    fn reduce_fn_expr(&mut self, id: ir::FnExprID);
    fn reduce_call_expr(&mut self, id: ir::CallExprID);
    fn reduce_cond_expr(&mut self, id: ir::CondExprID);
    fn reduce_jsx_elem(&mut self, id: ir::JsxElemID);
    fn reduce_jsx_self_closing_elem(&mut self, id: ir::JsxSelfClosingElemID);
    fn reduce_jsx_frag(&mut self, id: ir::JsxFragID);
}
